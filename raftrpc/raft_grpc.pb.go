// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: raftrpc/raft.proto

package raftrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RaftRpc_RequestVoteHandler_FullMethodName = "/raftrpc.RaftRpc/RequestVoteHandler"
	RaftRpc_HeartbeatHandler_FullMethodName   = "/raftrpc.RaftRpc/HeartbeatHandler"
)

// RaftRpcClient is the client API for RaftRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftRpcClient interface {
	// Sends a greeting
	RequestVoteHandler(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error)
	// Sends another greeting
	HeartbeatHandler(ctx context.Context, in *HeartBeatArgs, opts ...grpc.CallOption) (*HeartBeatReply, error)
}

type raftRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftRpcClient(cc grpc.ClientConnInterface) RaftRpcClient {
	return &raftRpcClient{cc}
}

func (c *raftRpcClient) RequestVoteHandler(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error) {
	out := new(RequestVoteReply)
	err := c.cc.Invoke(ctx, RaftRpc_RequestVoteHandler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftRpcClient) HeartbeatHandler(ctx context.Context, in *HeartBeatArgs, opts ...grpc.CallOption) (*HeartBeatReply, error) {
	out := new(HeartBeatReply)
	err := c.cc.Invoke(ctx, RaftRpc_HeartbeatHandler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftRpcServer is the server API for RaftRpc service.
// All implementations must embed UnimplementedRaftRpcServer
// for forward compatibility
type RaftRpcServer interface {
	// Sends a greeting
	RequestVoteHandler(context.Context, *RequestVoteArgs) (*RequestVoteReply, error)
	// Sends another greeting
	HeartbeatHandler(context.Context, *HeartBeatArgs) (*HeartBeatReply, error)
	mustEmbedUnimplementedRaftRpcServer()
}

// UnimplementedRaftRpcServer must be embedded to have forward compatible implementations.
type UnimplementedRaftRpcServer struct {
}

func (UnimplementedRaftRpcServer) RequestVoteHandler(context.Context, *RequestVoteArgs) (*RequestVoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVoteHandler not implemented")
}
func (UnimplementedRaftRpcServer) HeartbeatHandler(context.Context, *HeartBeatArgs) (*HeartBeatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartbeatHandler not implemented")
}
func (UnimplementedRaftRpcServer) mustEmbedUnimplementedRaftRpcServer() {}

// UnsafeRaftRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftRpcServer will
// result in compilation errors.
type UnsafeRaftRpcServer interface {
	mustEmbedUnimplementedRaftRpcServer()
}

func RegisterRaftRpcServer(s grpc.ServiceRegistrar, srv RaftRpcServer) {
	s.RegisterService(&RaftRpc_ServiceDesc, srv)
}

func _RaftRpc_RequestVoteHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRpcServer).RequestVoteHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftRpc_RequestVoteHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRpcServer).RequestVoteHandler(ctx, req.(*RequestVoteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftRpc_HeartbeatHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRpcServer).HeartbeatHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftRpc_HeartbeatHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRpcServer).HeartbeatHandler(ctx, req.(*HeartBeatArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftRpc_ServiceDesc is the grpc.ServiceDesc for RaftRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raftrpc.RaftRpc",
	HandlerType: (*RaftRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVoteHandler",
			Handler:    _RaftRpc_RequestVoteHandler_Handler,
		},
		{
			MethodName: "HeartbeatHandler",
			Handler:    _RaftRpc_HeartbeatHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raftrpc/raft.proto",
}
